## Put comments here that give an overall description of what your
## functions do

# These two functions were generated to calculate the inverse of a matrix

## Write a short comment describing this function

# makeCacheMatrix function used to construc 
# a special “matrix” object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(a) {
    x <<- a
  inv <<- NULL
}
  get <- function() x
  setinv <- function(inverse) inv <<- inverse
  getinv <- function() inv
  list(set = set, get = get, setinv = setinv, getinv = getinv)
# this list is used as the input to cacheSolve()
  }


## Write a short comment describing this function

## cacheSolve function used to computes the inverse 
## of the “matrix” returned by makeCacheMatrix(). 
## If the inverse has already been calculated, 
## it’ll returns the inverse from the cache directly.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    inv <- x$getinv()
## if the inverse has been calculated already
    if(!is.null(inv)) {
      message("getting cached result")
      return(inv)
    }
## Otherwise, calculate the inverse matrix 
    data <- x$get()
    inv <- solve(data, ...)
    
## sets value of the inverse in the cache via following function.
    x$setinv(inv)
    inv
  }
